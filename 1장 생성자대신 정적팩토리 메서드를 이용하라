1장 .  생성자 대신 정적 팩토리 메서드를 이용하라

정적팩토리 메서드란 객체생성 역할을 하는 클래스 메서드라고 볼수있다.

예시)
public static LocalTime of(int hour, int minute) {
  ChronoField.HOUR_OF_DAY.checkValidValue((long)hour);
  if (minute == 0) {
    return HOURS[hour];
  } else {
    ChronoField.MINUTE_OF_HOUR.checkValidValue((long)minute);
    return new LocalTime(hour, minute, 0, 0);
  }
}

localTime클래스의  of 메서드처럼 직접적으로 생성자를 통해 객체를 생성하는 것이 아닌 메서드를 통해서 객체를 생성하는 것을 정적 팩토리 메서드라고 한다.

예시)
public enum Color {
  RED,
  BLUE;
}
...
Color redColor = Color.valueOf("RED");
Color blueColor = Color.valueOf("BLUE");

valueOf 같이 조회하는 용도로 메서드를 사용

생성자와는 어떤 차이가 있나?
자바 프로그래머라면, 조슈아 블로크의 저서 "이펙티브 자바"라는 책을 누구나 한번 쯤은 들어봤을 것이다. 이 책에서 소개된 많은 아이템들 중에서 가장 첫 번째로 나오는 것이 바로 "생성자 대신 정적 팩토리 메서드를 고려하라" 이다.


1. 이름을 가질수있다.
-> 생성자는 new 라는 키워드를 통해 객체를 생성하는대 정적 팩토리 메서드는 메서드이름안에 목적자체를 담아낼수있다.
Ex)
public class LottoFactory() {
  private static final int LOTTO_SIZE = 6;
  
  private static List<LottoNumber> allLottoNumbers = ...; // 1~45까지의 로또 넘버
    
  public static Lotto createAutoLotto() {
    Collections.shuffle(allLottoNumbers);
    return new Lotto(allLottoNumbers.stream()
            .limit(LOTTO_SIZE)
            .collect(Collectors.toList()));
  }

  public static Lotto createManualLotto(List<LottoNumber> lottoNumbers) {
    return new Lotto(lottoNumbers);
  }
  ...
}

위의 예시와 같이 자동으로 로또 번호를 만들지 수동으로 만들지 메서드 이름을 가지고 판별할수있다.

2. 호출할 때마다 새로운 객체를 생성할 필요가 없다.
enum과 같이 자주 사용되는 요소의 개수가 정해져있다면 해당 개수만큼 미리 생성해놓고 조회(캐싱)할 수 있는 구조로 만들수 있다. 정적 팩터리 메서드와 캐싱구조를 함께 사용하면 매번 새로운 객체를 생성할 필요가 없어진다.

EX)
public class LottoNumber {
  private static final int MIN_LOTTO_NUMBER = 1;
  private static final int MAX_LOTTO_NUMBER = 45;
  
  private static Map<Integer, LottoNumber> lottoNumberCache = new HashMap<>();
  
  static {
    IntStream.range(MIN_LOTTO_NUMBER, MAX_LOTTO_NUMBER)
                .forEach(i -> lottoNumberCache.put(i, new LottoNumber(i)));
  }
  
  private int number;
  
  private LottoNumber(int number) {  
    this.number = number;
  }
  
  public LottoNumber of(int number) {  // LottoNumber를 반환하는 정적 팩토리 메서드
    return lottoNumberCache.get(number);
  }
  
  ...
}
생성자의 접근 제한자를 private으로 설정함으로써 객체 생성을 정적 팩토리 메서드로만 가능하도록 제한할 수 있다는 것이다. 이를 통해 정해진 범위를 벗어나는 로또 번호의 생성을 막을 수 있다는 장점을 확보할 수 있다.


3. 하위 자료형 객체를 반환할 수 있다.
하위 자료형 객체를 반환하는 정적 팩토리 메서드의 특징은 상속을 사용할 때 확인할 수 있다.

Basic, Intermediate, Advanced 클래스가 Level라는 상위 타입을 상속받고 있는 구조를 생각해보자. 시험 점수에 따라 결정되는하위 등급 타입을 반환하는 정적 팩토리 메서드를 만들면, 다음과 같이 분기처리를 통해 하위 타입의 객체를 반환할 수 있다.

public class Level {
  ... 
  public static Level of(int score) {
    if (score < 50) {
      return new Basic();
    } else if (score < 80) {
      return new Intermediate();
    } else {
      return new Advanced();
    }
  }
  ...
}

4. 객체 생성을 캡슐화할 수 있다.
정적 팩토리 메서드는 객체 생성을 캡슐화하는 방법이기도 하다.
캡슐화(Encapsulization)란?
데이터의 은닉을 말한다. 여기서는 생성자를 클래스의 메서드 안으로 숨기면서 내부 상태를 외부에 드러낼 필요없이 객체 생성 인터페이스 단순화 시킬 수 있다.

public class CarDto {
  private String name;
  private int position;
  
  pulbic static CarDto from(Car car) {
    return new CarDto(car.getName(), car.getPosition());
  }
}
CarDto carDto = CarDto.from(car);

이부분은 @data 어노테이션을 가지고 하면될거 같긴한대 .

아무튼 메서드 안에서 은닉 시킬수있어 좋은것 같다.

만약 정적 팩토리 메서드를 쓰지 않고 DTO로 변환한다면 외부에서 생성자의 내부 구현을 모두 드러낸 채 해야할 것이다.

Car carDto = CarDto.from(car); // 정적 팩토리 메서드를 쓴 경우
CarDto carDto = new CarDto(car.getName(), car.getPosition); // 생성자를 쓴 경우

요렇게 될것같다.
 

정적팩토리 메서드를 이용하는 경우는 단순히 생성자 역할뿐만 아니라 좀더 가독성이 좋은 코드와 객체지향적으로 프로그래밍 할수
있도록 도와주는것이 장점
객체간 형 변환이 필요하거나, 여러 번의 객체 생성이 필요한 경우라면 생성자보다는 정적 팩토리 메서드를 사용해보자.

정적 팩토리 메서드 네이밍 컨벤션
* from : 하나의 매개 변수를 받아서 객체를 생성
* of : 여러개의 매개 변수를 받아서 객체를 생성
* getInstance | instance : 인스턴스를 생성. 이전에 반환했던 것과 같을 수 있음.
* newInstance | create : 새로운 인스턴스를 생성
* get[OtherType] : 다른 타입의 인스턴스를 생성. 이전에 반환했던 것과 같을 수 있음.
* new[OtherType] : 다른 타입의 새로운 인스턴스를 생성.


-> https://velog.io/@ljinsk3/%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%8A%94-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C

